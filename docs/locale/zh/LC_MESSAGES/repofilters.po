#
msgid ""
msgstr ""
"Project-Id-Version: pycsw 2.0-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-08 22:54+0800\n"
"PO-Revision-Date: 2022-03-09 14:22+0800\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.8.0\n"
"X-Generator: Poedit 3.0.1\n"

#: ../../repofilters.rst:4
msgid "Repository Filters"
msgstr "存储库中的筛选器"

#: ../../repofilters.rst:6
msgid ""
"pycsw has the ability to perform server side repository / database filters as a "
"means to mask all requests to query against a specific subset of the metadata "
"repository, thus providing the ability to deploy multiple pycsw instances "
"pointing to the same database in different ways via the ``repository.filter`` "
"configuration option."
msgstr ""
"pycsw 能够执行服务器端存储库/数据库过滤器，以屏蔽所有查询以查询元数据存储库的特"
"定子集的请求，从而提供通过 ` 以不同方式部署指向同一数据库的多个 pycsw 实例的能"
"力 `repository.filter` 配置选项。"

#: ../../repofilters.rst:8
msgid ""
"Repository filters are a convenient way to subset your repository at the server "
"level without the hassle of creating proper database views.  For large "
"repositories, it may be better to subset at the database level for performance."
msgstr ""
"存储库过滤器是一种在服务器级别对存储库进行子集化的便捷方式，无需创建适当的数据库"
"视图。对于大型存储库，最好在数据库级别进行子集化以提高性能。"

#: ../../repofilters.rst:11
msgid "Scenario: One Database, Many Views"
msgstr "场景 ︰ 一个数据库，很多种视角"

#: ../../repofilters.rst:13
msgid "Imagine a sample database table of records (subset below for brevity):"
msgstr "想象一个示例数据库记录表（为简洁起见，下面的子集）："

#: ../../repofilters.rst:1
msgid "identifier"
msgstr "标识符"

#: ../../repofilters.rst:1
msgid "parentidentifier"
msgstr "父标识符"

#: ../../repofilters.rst:1
msgid "title"
msgstr "标题"

#: ../../repofilters.rst:1
msgid "abstract"
msgstr "摘要"

#: ../../repofilters.rst:1
msgid "1"
msgstr "1"

#: ../../repofilters.rst:1
msgid "33"
msgstr "33"

#: ../../repofilters.rst:1
msgid "foo1"
msgstr "foo1"

#: ../../repofilters.rst:1
msgid "bar1"
msgstr "bar1"

#: ../../repofilters.rst:1
msgid "2"
msgstr "2"

#: ../../repofilters.rst:1
msgid "foo2"
msgstr "foo2"

#: ../../repofilters.rst:1
msgid "bar2"
msgstr "bar2"

#: ../../repofilters.rst:1
msgid "3"
msgstr "3"

#: ../../repofilters.rst:1
msgid "55"
msgstr "55"

#: ../../repofilters.rst:1
msgid "foo3"
msgstr "foo3"

#: ../../repofilters.rst:1
msgid "bar3"
msgstr "bar3"

#: ../../repofilters.rst:1
msgid "4"
msgstr "4"

#: ../../repofilters.rst:1
msgid "5"
msgstr "5"

#: ../../repofilters.rst:1
msgid "21"
msgstr "21"

#: ../../repofilters.rst:1
msgid "foo5"
msgstr "foo5"

#: ../../repofilters.rst:1
msgid "bar5"
msgstr "bar5"

#: ../../repofilters.rst:1
msgid "foo6"
msgstr "foo6"

#: ../../repofilters.rst:1
msgid "bar6"
msgstr "bar6"

#: ../../repofilters.rst:25
msgid ""
"A default pycsw instance (with no ``repository.filters`` option) will always "
"process requests against the entire table.  So a CSW `GetRecords` filter like:"
msgstr ""
"默认的 pycsw 实例（没有 ``repository.filters`` 选项）将始终处理针对整个表的请"
"求。因此 CSW `GetRecords` 过滤器如："

#: ../../repofilters.rst:36
msgid "...will return:"
msgstr "...将返回："

#: ../../repofilters.rst:44
msgid ""
"Suppose you wanted to deploy another pycsw instance which serves metadata from "
"the same database, but only from a specific subset.  Here we set the "
"``repository.filter`` option:"
msgstr ""
"假设想部署另一个 pycsw 实例，该实例提供来自同一数据库的元数据，但仅来自特定子"
"集。在这里，设置了 ``repository.filter`` 选项："

#: ../../repofilters.rst:52 ../../repofilters.rst:67
msgid ""
"The same CSW `GetRecords` filter as per above then yields the following results:"
msgstr "依上述所说，同一CSW `GetRecords` 过滤器将得到以下结果："

#: ../../repofilters.rst:59
msgid "Another example:"
msgstr "另一个例子："

#: ../../repofilters.rst:74
msgid ""
"The ``repository.filter`` option accepts all core queryables set in the pycsw "
"core model (see ``pycsw.config.StaticContext.md_core_model`` for the complete "
"list)."
msgstr ""
"该 ``repository.filter`` 选项功能是在pycsw核心模式中接收所有核心查询设置（见"
"``pycsw.config.StaticContext.md_core_model`` 的完整列表）。"
